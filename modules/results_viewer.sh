#!/bin/bash

# ==============================================================================
# Module d'affichage des r√©sultats WiFiCyberTools
# ==============================================================================

results_viewer_menu() {
    header
    echo -e "${BLUE}üìä VISUALISATION DES R√âSULTATS${NC}"

    local result_count=$(find "$RESULTS_DIR" -name "*.txt" 2>/dev/null | wc -l)
    echo -e "  üìä Fichiers de r√©sultats: ${GREEN}$result_count${NC}"

    echo
    echo "1) Lister tous les r√©sultats"
    echo "2) Afficher un r√©sultat sp√©cifique"
    echo "3) Statistiques globales"
    echo "4) Exporter les r√©sultats"
    echo "5) Nettoyer les anciens r√©sultats"
    echo "6) Retour au menu principal"
    echo

    read -p "Votre choix [1-6]: " choice

    case $choice in
        1) list_all_results ;;
        2) show_specific_result ;;
        3) show_global_stats ;;
        4) export_results ;;
        5) clean_old_results ;;
        6) return ;;
        *) warn "Option invalide" ;;
    esac

    read -p "Appuyez sur Entr√©e pour continuer..."
    results_viewer_menu
}

list_all_results() {
    header
    echo -e "${BLUE}üìã TOUS LES R√âSULTATS${NC}"
    echo

    local results=($(find "$RESULTS_DIR" -name "*.txt" -type f | sort -r))
    if [ ${#results[@]} -eq 0 ]; then
        warn "Aucun r√©sultat trouv√©"
        return
    fi

    for result in "${results[@]}"; do
        local name=$(basename "$result")
        local date=$(stat -c%y "$result" | cut -d' ' -f1)
        local count=$(wc -l < "$result")
        local status="üîì"
        if [ "$count" -eq 0 ]; then
            status="‚ùå"
        fi
        echo "  $status $name - $date - $count mot(s) de passe"
        if [ "$count" -gt 0 ]; then
            echo "    Aper√ßu:"
            head -3 "$result" | while IFS=: read -r hash password; do
                echo "      üóùÔ∏è  $password"
            done
        fi
        echo
    done
}

show_specific_result() {
    header
    echo -e "${BLUE}üîé AFFICHER UN R√âSULTAT${NC}"
    echo

    local results=($(find "$RESULTS_DIR" -name "*.txt" -type f | sort -r))
    if [ ${#results[@]} -eq 0 ]; then
        warn "Aucun r√©sultat trouv√©"
        return
    fi

    echo "R√©sultats disponibles :"
    for i in "${!results[@]}"; do
        local name=$(basename "${results[$i]}")
        echo "  $((i+1))) $name"
    done

    read -p "S√©lectionner un r√©sultat [1-${#results[@]}]: " num
    if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 1 ] && [ "$num" -le ${#results[@]} ]; then
        local selected="${results[$((num-1))]}"
        echo
        echo -e "${CYAN}Contenu de $selected:${NC}"
        cat "$selected" | while IFS=: read -r hash password; do
            echo "  üóùÔ∏è  $password"
        done
    else
        warn "S√©lection invalide"
    fi
}

show_global_stats() {
    header
    echo -e "${BLUE}üìà STATISTIQUES GLOBALES${NC}"
    echo

    local total_results=$(find "$RESULTS_DIR" -name "*.txt" | wc -l)
    local successful_attacks=0
    local total_passwords=0

    # Compter les attaques r√©ussies
    find "$RESULTS_DIR" -name "*.txt" -type f | while IFS= read -r file; do
        local count=$(wc -l < "$file")
        if [ "$count" -gt 0 ]; then
            successful_attacks=$((successful_attacks + 1))
            total_passwords=$((total_passwords + count))
        fi
    done

    echo "üìä R√©sum√© des attaques:"
    echo "  ‚Ä¢ Total d'attaques: $total_results"
    echo "  ‚Ä¢ Attaques r√©ussies: $successful_attacks"
    if [ "$total_results" -gt 0 ]; then
        echo "  ‚Ä¢ Taux de succ√®s: $((successful_attacks * 100 / total_results))%"
    else
        echo "  ‚Ä¢ Taux de succ√®s: 0%"
    fi
    echo "  ‚Ä¢ Mots de passe totaux: $total_passwords"
    echo

    # Top des mots de passe les plus fr√©quents
    if [ "$total_passwords" -gt 0 ]; then
        echo "üèÜ Top des mots de passe trouv√©s:"
        find "$RESULTS_DIR" -name "*.txt" -exec cat {} \; | \
        cut -d: -f2 | sort | uniq -c | sort -nr | head -10 | \
        while read count password; do
            echo "  $count√ó $password"
        done
    fi
}

export_results() {
    header
    echo -e "${BLUE}‚¨áÔ∏è  EXPORTER LES R√âSULTATS${NC}"
    local export_file="$RESULTS_DIR/export_all_results_$(date +%Y%m%d_%H%M%S).txt"
    find "$RESULTS_DIR" -name "*.txt" -type f -exec cat {} \; | cut -d: -f2 | sort | uniq > "$export_file"
    success "Export r√©alis√©¬†: $export_file"
    echo "Contenu¬†:"
    head -10 "$export_file"
    echo ...
}

clean_old_results() {
    header
    echo -e "${RED}üßπ NETTOYER LES ANCIENS R√âSULTATS${NC}"
    echo
    read -p "Supprimer tous les r√©sultats de plus de combien de jours ? [30]: " days
    days=${days:-30}
    local to_delete=$(find "$RESULTS_DIR" -name "*.txt" -mtime +"$days" -type f)
    local delete_count=$(echo "$to_delete" | wc -l)
    if [ "$delete_count" -eq 0 ]; then
        success "Aucun r√©sultat ancien √† supprimer."
        return
    fi
    echo -e "${YELLOW}$delete_count r√©sultat(s) vont √™tre supprim√©(s). Continuer ? [y/N]:${NC}"
    read -r confirm
    if [[ "$confirm" =~ ^[yY]$ ]]; then
        echo "$to_delete" | xargs rm -f
        success "$delete_count r√©sultat(s) supprim√©(s)"
    else
        echo "Suppression annul√©e."
    fi
}
